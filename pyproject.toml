[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "imthedev"
version = "0.1.0"
description = "A sophisticated, keyboard-driven terminal application for managing SuperClaude workflows"
readme = "README.md"
license = {text = "Elastic License 2.0 (ELv2)"}
authors = [
    {name = "imthedev contributors"},
]
maintainers = [
    {name = "imthedev contributors"},
]
keywords = ["terminal", "tui", "ai", "development", "workflow", "claude", "superClaude"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Environment :: Console",
    "Intended Audience :: Developers",
    "License :: Other/Proprietary License",
    "Operating System :: OS Independent",
    "Programming Language :: Python",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Software Development :: Libraries :: Application Frameworks",
    "Topic :: Software Development :: User Interfaces",
    "Topic :: Terminals",
    "Typing :: Typed",
]
requires-python = ">=3.11"
dependencies = [
    "textual>=0.40.0",
    "aiosqlite>=0.19.0",
    "anthropic>=0.18.0",
    "openai>=1.0.0",
    "aiofiles>=23.2.1",
    "pydantic>=2.0.0",
    "toml>=0.10.2",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.4.0",
    "pytest-asyncio>=0.21.0",
    "mypy>=1.5.0",
    "ruff>=0.1.0",
    "black>=23.0.0",
    "coverage>=7.3.0",
    "pytest-cov>=4.1.0",
]

docs = [
    "mkdocs>=1.5.0",
    "mkdocs-material>=9.0.0",
    "mkdocstrings[python]>=0.23.0",
]

[project.scripts]
imthedev = "imthedev.main:main"

[project.urls]
Homepage = "https://github.com/Custos/imthedev"
Repository = "https://github.com/Custos/imthedev.git"
Issues = "https://github.com/Custos/imthedev/issues"

[tool.hatch.build.targets.sdist]
include = [
    "/imthedev",
    "/tests",
    "/LICENSE",
    "/README.md",
]

[tool.hatch.build.targets.wheel]
packages = ["imthedev"]

[tool.mypy]
python_version = "3.11"
strict = true
warn_return_any = true
warn_unused_configs = true
no_implicit_reexport = true
namespace_packages = true
show_error_codes = true
show_column_numbers = true
pretty = true

[[tool.mypy.overrides]]
module = [
    "anthropic.*",
    "openai.*",
    "textual.*",
    "aiosqlite.*",
]
ignore_missing_imports = true

[tool.ruff]
target-version = "py311"
line-length = 88
fix = true

[tool.ruff.lint]
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # pyflakes
    "I",   # isort
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "UP",  # pyupgrade
    "ARG", # flake8-unused-arguments
    "SIM", # flake8-simplify
]
ignore = [
    "E501",  # line too long - handled by black
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
]

[tool.ruff.lint.isort]
known-first-party = ["imthedev"]

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"

[tool.pytest.ini_options]
minversion = "7.0"
testpaths = ["tests"]
python_files = "test_*.py"
python_functions = "test_*"
python_classes = "Test*"
addopts = [
    "--strict-markers",
    "--tb=short",
    "--asyncio-mode=auto",
    "-vv",
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]

[tool.coverage.run]
source = ["imthedev"]
omit = [
    "*/tests/*",
    "*/__init__.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
    "Protocol",
    "@abstractmethod",
]
precision = 2
show_missing = true
skip_covered = false

[tool.black]
line-length = 88
target-version = ["py311"]
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''